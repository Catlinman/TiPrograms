"Tree generation program"

StoreGDB 1
{1, 6} -> dim([B])
1 -> X
ClrHome
ClrDraw
Disp "TREE GEN"
Input "LEVELS:", L
Input "STRENGTH:", S
Input "GRAVITY:", G
Input "BRANCHING:", B
Input "OFFSET:", O
Input "DISTANCE:", D
Trace
B / L -> B
1 -> [B](1, 1)
1 -> [B](1, 6)
For(I, 1, L)
	dim([B]) -> L3
	For(J, 1, L3(1))
		If [B](J, 6) = I and [B](J, 1)= 1: Then
			randInt(1, int(B + 1 * I)) -> R
			For(K, 1, R)
				X + 1 -> X
				{X, 6} -> dim([B])
				I + 1 -> [B](X, 6)
				1 -> [B](X, 1)
				1 -> Z
				1 -> U
				[B](J, 4) + randInt(int(-O * (R * I) * 1000), int(O * (R * I) * 1000)) / 1000 / I -> [B](X, 4)
				[B](J, 5) + (randInt(-1000, 1000) / 1000) + S - G -> [B](X, 5)
				[B](J, 2) + [B](X, 4) -> [B](X, 2)
				[B](J, 3) + [B](X, 5) -> [B](X, 3)
				Line([B](J, 2), [B](J, 3), [B](X, 2), [B](X, 3))
			End
			randInt(0, 1000) -> R
			If R < (1000 / (L * I)): Then
				0 -> [B](J, 1)
			End
		End
	End
End
For(I, 1, L3(1))
	For(J, 1, randInt(1, int(B * [B](I, 6))))
		Line([B](I, 2), [B](I, 3), [B](I, 2) + randInt(-int(O), int(O)) + [B](I, 4) * [B](I, 6), [B](I, 3) + randInt(-int(O), int(O)) + [B](I, 5) * [B](I, 6) / 4)
	End
End